group 'com.jetbrains.rd'

buildscript {
    apply from: 'versions.gradle'

    repositories {
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    }
}

allprojects {
    ext.applyKotlinJS = {
        apply plugin: 'kotlin-platform-js'

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
        }

        def target = "${projectDir}/build/classes/main"
        def projectName = name

        compileKotlin2Js {
            kotlinOptions.metaInfo = true
            kotlinOptions.outputFile = "$target/${projectName}.js"
            kotlinOptions.sourceMap = true
            kotlinOptions.moduleKind = 'commonjs'
            kotlinOptions.main = 'call'
            kotlinOptions.typedArrays = true
        }

        compileTestKotlin2Js {
            kotlinOptions.metaInfo = true
            kotlinOptions.outputFile = "$target/${projectName}.test.js"
            kotlinOptions.sourceMap = true
            kotlinOptions.moduleKind = 'commonjs'
            kotlinOptions.main = 'call'
            kotlinOptions.typedArrays = true
        }

        kotlin { experimental.coroutines = 'enable' }
    }

    ext.applyKotlinCommon = {
        apply plugin: 'kotlin-platform-common'


        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
        }

        kotlin { experimental.coroutines = 'enable' }
    }

    ext.applyKotlinJVM = {
        apply plugin: 'java'
        apply plugin: 'kotlin-platform-jvm'
        apply plugin: "jacoco"

        test { finalizedBy jacocoTestReport }

        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
            compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

            testCompile "junit:junit:4.12"
            testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
            testCompile "org.jetbrains.kotlin:kotlin-test-testng:$kotlin_version"
            testCompile "org.testng:testng:6.14.2"
//            testCompile group: 'junit', name: 'junit', version: junit_version
        }

        kotlin { experimental.coroutines = 'enable' }

        compileKotlin {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }

        compileTestKotlin {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }

    }

    ext.configureNodePlugin = {
        apply plugin: 'com.moowork.node'

        node {

            // Version of node to use.
            version = '8.7.0'

            // Version of npm to use.
            //npmVersion = '3.10.8'

            // Version of yarn to use.
            yarnVersion = '1.2.1'

            // Base URL for fetching node distributions (change if you have a mirror).
            distBaseUrl = 'https://nodejs.org/dist'

            // If true, it will download node using above parameters.
            // If false, it will try to use globally installed node.
            download = true

            // Set the work directory for unpacking node
            workDir = file("${rootProject.buildDir}/nodejs")

            // Set the work directory where node_modules should be located
            nodeModulesDir = file("${rootProject.projectDir}")
        }
    }

    configurations.all {
        resolutionStrategy {
            force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        }
    }

    repositories {
        //mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "http://dl.bintray.com/kotlin/exposed" }
        maven { url "http://repo.labs.intellij.net/ring-license-checker" }
        maven { url "https://dl.bintray.com/kotlin/ktor" }
        maven { url "http://dl.bintray.com/cy6ergn0m/maven" }
        maven { url "http://dl.bintray.com/kotlinx/kotlinx" }
        maven { url "http://maven.labs.intellij.net/hub" }
        maven { url "https://jitpack.io" }
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "http://dl.bintray.com/hypnosphi/kotlin-wrappers" }
    }
}
